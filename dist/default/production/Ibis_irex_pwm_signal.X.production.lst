

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Aug 11 16:48:31 2022

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F684
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    10                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 12/02/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F684 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0007                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001E                     	;# 
    77  001F                     	;# 
    78  0081                     	;# 
    79  0085                     	;# 
    80  0087                     	;# 
    81  008C                     	;# 
    82  008E                     	;# 
    83  008F                     	;# 
    84  0090                     	;# 
    85  0091                     	;# 
    86  0092                     	;# 
    87  0095                     	;# 
    88  0095                     	;# 
    89  0096                     	;# 
    90  0096                     	;# 
    91  0099                     	;# 
    92  009A                     	;# 
    93  009A                     	;# 
    94  009B                     	;# 
    95  009C                     	;# 
    96  009D                     	;# 
    97  009E                     	;# 
    98  009F                     	;# 
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0007                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000E                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0013                     	;# 
   116  0013                     	;# 
   117  0014                     	;# 
   118  0015                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001E                     	;# 
   125  001F                     	;# 
   126  0081                     	;# 
   127  0085                     	;# 
   128  0087                     	;# 
   129  008C                     	;# 
   130  008E                     	;# 
   131  008F                     	;# 
   132  0090                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0095                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0096                     	;# 
   139  0099                     	;# 
   140  009A                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009C                     	;# 
   144  009D                     	;# 
   145  009E                     	;# 
   146  009F                     	;# 
   147  0013                     _CCPR1L	set	19
   148  001E                     _ADRESH	set	30
   149  001F                     _ADCON0	set	31
   150  0038                     _RC0	set	56
   151  00AC                     _DC1B0	set	172
   152  00AD                     _DC1B1	set	173
   153  002D                     _RA5	set	45
   154  00F9                     _GO_nDONE	set	249
   155  0092                     _TMR2ON	set	146
   156  0090                     _T2CKPS0	set	144
   157  0091                     _T2CKPS1	set	145
   158  0061                     _TMR2IF	set	97
   159  00AE                     _P1M0	set	174
   160  00AF                     _P1M1	set	175
   161  00A8                     _CCP1M0	set	168
   162  00A9                     _CCP1M1	set	169
   163  00AA                     _CCP1M2	set	170
   164  00AB                     _CCP1M3	set	171
   165  0091                     _ANSEL	set	145
   166  0085                     _TRISA	set	133
   167  0087                     _TRISC	set	135
   168  009E                     _ADRESL	set	158
   169  009F                     _ADCON1	set	159
   170  0092                     _PR2	set	146
   171  047C                     _IRCF0	set	1148
   172  047D                     _IRCF1	set	1149
   173  047E                     _IRCF2	set	1150
   174  043D                     _TRISC5	set	1085
   175                           
   176                           	psect	cinit
   177  07FE                     start_initialization:	
   178                           ; #config settings
   179                           
   180  07FE                     __initialization:
   181  07FE                     end_of_initialization:	
   182                           ;End of C runtime variable initialization code
   183                           
   184  07FE                     __end_of__initialization:
   185  07FE  0183               	clrf	3
   186  07FF  2F49               	ljmp	_main	;jump to C main() function
   187                           
   188                           	psect	cstackCOMMON
   189  0070                     __pcstackCOMMON:
   190  0070                     ?_PWM_Initialize:
   191  0070                     ??_PWM_Initialize:	
   192                           ; 1 bytes @ 0x0
   193                           
   194  0070                     ?_ADC_Initialize:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0070                     ??_ADC_Initialize:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0070                     ?_main:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0070                     ?_ADC_Read:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0070                     ?___lmul:	
   207                           ; 2 bytes @ 0x0
   208                           
   209  0070                     ___lmul@multiplier:	
   210                           ; 4 bytes @ 0x0
   211                           
   212                           
   213                           ; 4 bytes @ 0x0
   214  0070                     	ds	2
   215  0072                     ??_ADC_Read:
   216                           
   217                           ; 1 bytes @ 0x2
   218  0072                     	ds	2
   219  0074                     ___lmul@multiplicand:
   220                           
   221                           ; 4 bytes @ 0x4
   222  0074                     	ds	4
   223  0078                     ??___lmul:
   224                           
   225                           ; 1 bytes @ 0x8
   226  0078                     	ds	1
   227  0079                     ___lmul@product:
   228                           
   229                           ; 4 bytes @ 0x9
   230  0079                     	ds	4
   231  007D                     ??___aldiv:
   232                           
   233                           ; 1 bytes @ 0xD
   234  007D                     	ds	1
   235  007E                     ??_main:
   236                           
   237                           	psect	cstackBANK0
   238  0020                     __pcstackBANK0:	
   239                           ; 1 bytes @ 0xE
   240                           
   241  0020                     ?___aldiv:
   242  0020                     ___aldiv@divisor:	
   243                           ; 4 bytes @ 0x0
   244                           
   245                           
   246                           ; 4 bytes @ 0x0
   247  0020                     	ds	4
   248  0024                     ___aldiv@dividend:
   249                           
   250                           ; 4 bytes @ 0x4
   251  0024                     	ds	4
   252  0028                     ___aldiv@counter:
   253                           
   254                           ; 1 bytes @ 0x8
   255  0028                     	ds	1
   256  0029                     ___aldiv@sign:
   257                           
   258                           ; 1 bytes @ 0x9
   259  0029                     	ds	1
   260  002A                     ___aldiv@quotient:
   261                           
   262                           ; 4 bytes @ 0xA
   263  002A                     	ds	4
   264  002E                     ?_map:
   265  002E                     map@x:	
   266                           ; 4 bytes @ 0xE
   267                           
   268                           
   269                           ; 4 bytes @ 0xE
   270  002E                     	ds	4
   271  0032                     map@in_min:
   272                           
   273                           ; 4 bytes @ 0x12
   274  0032                     	ds	4
   275  0036                     map@in_max:
   276                           
   277                           ; 4 bytes @ 0x16
   278  0036                     	ds	4
   279  003A                     map@out_min:
   280                           
   281                           ; 4 bytes @ 0x1A
   282  003A                     	ds	4
   283  003E                     map@out_max:
   284                           
   285                           ; 4 bytes @ 0x1E
   286  003E                     	ds	4
   287  0042                     ??_map:
   288                           
   289                           ; 1 bytes @ 0x22
   290  0042                     	ds	16
   291  0052                     main@duty:
   292                           
   293                           ; 2 bytes @ 0x32
   294  0052                     	ds	2
   295  0054                     main@flag2:
   296                           
   297                           ; 1 bytes @ 0x34
   298  0054                     	ds	1
   299  0055                     main@val1:
   300                           
   301                           ; 2 bytes @ 0x35
   302  0055                     	ds	2
   303  0057                     main@val2:
   304                           
   305                           ; 2 bytes @ 0x37
   306  0057                     	ds	2
   307  0059                     main@counter:
   308                           
   309                           ; 2 bytes @ 0x39
   310  0059                     	ds	2
   311                           
   312                           	psect	maintext
   313  0749                     __pmaintext:	
   314 ;;
   315 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   316 ;;
   317 ;; *************** function _main *****************
   318 ;; Defined at:
   319 ;;		line 58 in file "ibismain.c"
   320 ;; Parameters:    Size  Location     Type
   321 ;;		None
   322 ;; Auto vars:     Size  Location     Type
   323 ;;  counter         2   57[BANK0 ] int 
   324 ;;  val2            2   55[BANK0 ] int 
   325 ;;  val1            2   53[BANK0 ] int 
   326 ;;  duty            2   50[BANK0 ] int 
   327 ;;  flag2           1   52[BANK0 ] unsigned char 
   328 ;; Return value:  Size  Location     Type
   329 ;;                  1    wreg      void 
   330 ;; Registers used:
   331 ;;		wreg, status,2, status,0, pclath, cstack
   332 ;; Tracked objects:
   333 ;;		On entry : B00/0
   334 ;;		On exit  : 0/0
   335 ;;		Unchanged: 0/0
   336 ;; Data sizes:     COMMON   BANK0   BANK1
   337 ;;      Params:         0       0       0
   338 ;;      Locals:         0       9       0
   339 ;;      Temps:          0       0       0
   340 ;;      Totals:         0       9       0
   341 ;;Total ram usage:        9 bytes
   342 ;; Hardware stack levels required when called:    2
   343 ;; This function calls:
   344 ;;		_ADC_Initialize
   345 ;;		_ADC_Read
   346 ;;		_PWM_Initialize
   347 ;;		_map
   348 ;; This function is called by:
   349 ;;		Startup code after reset
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353                           
   354                           ;psect for function _main
   355  0749                     _main:
   356  0749                     l917:	
   357                           ;incstack = 0
   358                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   359                           
   360                           
   361                           ;ibismain.c: 60:  int duty, val1;;ibismain.c: 61:  int val2, counter;;ibismain.c: 62:  c
      +                          har flag2;;ibismain.c: 63:  IRCF2 = 1; IRCF1 = 1; IRCF0 = 1;
   362  0749  1683               	bsf	3,5	;RP0=1, select bank1
   363  074A  170F               	bsf	15,6	;volatile
   364  074B  168F               	bsf	15,5	;volatile
   365  074C  160F               	bsf	15,4	;volatile
   366  074D                     l919:
   367                           
   368                           ;ibismain.c: 64:  TRISC = 0x00;
   369  074D  0187               	clrf	7	;volatile
   370  074E                     l921:
   371                           
   372                           ;ibismain.c: 65:  TRISA = 0xFF;
   373  074E  30FF               	movlw	255
   374  074F  0085               	movwf	5	;volatile
   375  0750                     l923:
   376                           
   377                           ;ibismain.c: 66:  ANSEL = 4;
   378  0750  3004               	movlw	4
   379  0751  0091               	movwf	17	;volatile
   380  0752                     l925:
   381                           
   382                           ;ibismain.c: 68:  ADC_Initialize();
   383  0752  2598               	fcall	_ADC_Initialize
   384  0753                     l927:
   385                           
   386                           ;ibismain.c: 69:  PWM_Initialize();
   387  0753  25B4               	fcall	_PWM_Initialize
   388  0754                     l929:
   389                           
   390                           ;ibismain.c: 73:   if(RA5 == 1){
   391  0754  1283               	bcf	3,5	;RP0=0, select bank0
   392  0755  1E85               	btfss	5,5	;volatile
   393  0756  2F58               	goto	u491
   394  0757  2F59               	goto	u490
   395  0758                     u491:
   396  0758  2F9D               	goto	l82
   397  0759                     u490:
   398  0759                     l931:
   399                           
   400                           ;ibismain.c: 74:    duty = ADC_Read();
   401  0759  259F               	fcall	_ADC_Read
   402  075A  0871               	movf	?_ADC_Read+1,w
   403  075B  1283               	bcf	3,5	;RP0=0, select bank0
   404  075C  00D3               	movwf	main@duty+1
   405  075D  0870               	movf	?_ADC_Read,w
   406  075E  00D2               	movwf	main@duty
   407  075F                     l933:
   408                           
   409                           ;ibismain.c: 75:    val1 = map(duty, 0, 1023, 0, 160);
   410  075F  0852               	movf	main@duty,w
   411  0760  00AE               	movwf	map@x
   412  0761  0853               	movf	main@duty+1,w
   413  0762  00AF               	movwf	map@x+1
   414  0763  3000               	movlw	0
   415  0764  1BAF               	btfsc	map@x+1,7
   416  0765  30FF               	movlw	255
   417  0766  00B0               	movwf	map@x+2
   418  0767  00B1               	movwf	map@x+3
   419  0768  3000               	movlw	0
   420  0769  00B5               	movwf	map@in_min+3
   421  076A  3000               	movlw	0
   422  076B  00B4               	movwf	map@in_min+2
   423  076C  3000               	movlw	0
   424  076D  00B3               	movwf	map@in_min+1
   425  076E  3000               	movlw	0
   426  076F  00B2               	movwf	map@in_min
   427  0770  3000               	movlw	0
   428  0771  00B9               	movwf	map@in_max+3
   429  0772  3000               	movlw	0
   430  0773  00B8               	movwf	map@in_max+2
   431  0774  3003               	movlw	3
   432  0775  00B7               	movwf	map@in_max+1
   433  0776  30FF               	movlw	255
   434  0777  00B6               	movwf	map@in_max
   435  0778  3000               	movlw	0
   436  0779  00BD               	movwf	map@out_min+3
   437  077A  3000               	movlw	0
   438  077B  00BC               	movwf	map@out_min+2
   439  077C  3000               	movlw	0
   440  077D  00BB               	movwf	map@out_min+1
   441  077E  3000               	movlw	0
   442  077F  00BA               	movwf	map@out_min
   443  0780  3000               	movlw	0
   444  0781  00C1               	movwf	map@out_max+3
   445  0782  3000               	movlw	0
   446  0783  00C0               	movwf	map@out_max+2
   447  0784  3000               	movlw	0
   448  0785  00BF               	movwf	map@out_max+1
   449  0786  30A0               	movlw	160
   450  0787  00BE               	movwf	map@out_max
   451  0788  26AC               	fcall	_map
   452  0789  1283               	bcf	3,5	;RP0=0, select bank0
   453  078A  082F               	movf	?_map+1,w
   454  078B  00D6               	movwf	main@val1+1
   455  078C  082E               	movf	?_map,w
   456  078D  00D5               	movwf	main@val1
   457  078E                     l935:
   458                           
   459                           ;ibismain.c: 76:    DC1B1 = val1 & 2;
   460  078E  1295               	bcf	21,5	;volatile
   461  078F                     l937:
   462                           
   463                           ;ibismain.c: 77:    DC1B0 = val1 & 1;
   464  078F  1855               	btfsc	main@val1,0
   465  0790  2F92               	goto	u501
   466  0791  2F95               	goto	u500
   467  0792                     u501:
   468  0792  1283               	bcf	3,5	;RP0=0, select bank0
   469  0793  1615               	bsf	21,4	;volatile
   470  0794  2F97               	goto	u514
   471  0795                     u500:
   472  0795  1283               	bcf	3,5	;RP0=0, select bank0
   473  0796  1215               	bcf	21,4	;volatile
   474  0797                     u514:
   475  0797                     l939:
   476                           
   477                           ;ibismain.c: 78:    CCPR1L = val1;
   478  0797  0855               	movf	main@val1,w
   479  0798  0093               	movwf	19	;volatile
   480  0799                     l941:
   481                           
   482                           ;ibismain.c: 79:    RC0 = 0;
   483  0799  1007               	bcf	7,0	;volatile
   484  079A                     l943:
   485                           
   486                           ;ibismain.c: 80:    counter = 0;
   487  079A  01D9               	clrf	main@counter
   488  079B  01DA               	clrf	main@counter+1
   489                           
   490                           ;ibismain.c: 81:   }
   491  079C  2F54               	goto	l929
   492  079D                     l82:	
   493                           ;ibismain.c: 82:   else{
   494                           
   495                           
   496                           ;ibismain.c: 83:    RC0 = 1;
   497  079D  1407               	bsf	7,0	;volatile
   498  079E                     l945:
   499                           
   500                           ;ibismain.c: 84:    val2 = map(counter, 0, 1023, 0, 80);
   501  079E  0859               	movf	main@counter,w
   502  079F  00AE               	movwf	map@x
   503  07A0  085A               	movf	main@counter+1,w
   504  07A1  00AF               	movwf	map@x+1
   505  07A2  3000               	movlw	0
   506  07A3  1BAF               	btfsc	map@x+1,7
   507  07A4  30FF               	movlw	255
   508  07A5  00B0               	movwf	map@x+2
   509  07A6  00B1               	movwf	map@x+3
   510  07A7  3000               	movlw	0
   511  07A8  00B5               	movwf	map@in_min+3
   512  07A9  3000               	movlw	0
   513  07AA  00B4               	movwf	map@in_min+2
   514  07AB  3000               	movlw	0
   515  07AC  00B3               	movwf	map@in_min+1
   516  07AD  3000               	movlw	0
   517  07AE  00B2               	movwf	map@in_min
   518  07AF  3000               	movlw	0
   519  07B0  00B9               	movwf	map@in_max+3
   520  07B1  3000               	movlw	0
   521  07B2  00B8               	movwf	map@in_max+2
   522  07B3  3003               	movlw	3
   523  07B4  00B7               	movwf	map@in_max+1
   524  07B5  30FF               	movlw	255
   525  07B6  00B6               	movwf	map@in_max
   526  07B7  3000               	movlw	0
   527  07B8  00BD               	movwf	map@out_min+3
   528  07B9  3000               	movlw	0
   529  07BA  00BC               	movwf	map@out_min+2
   530  07BB  3000               	movlw	0
   531  07BC  00BB               	movwf	map@out_min+1
   532  07BD  3000               	movlw	0
   533  07BE  00BA               	movwf	map@out_min
   534  07BF  3000               	movlw	0
   535  07C0  00C1               	movwf	map@out_max+3
   536  07C1  3000               	movlw	0
   537  07C2  00C0               	movwf	map@out_max+2
   538  07C3  3000               	movlw	0
   539  07C4  00BF               	movwf	map@out_max+1
   540  07C5  3050               	movlw	80
   541  07C6  00BE               	movwf	map@out_max
   542  07C7  26AC               	fcall	_map
   543  07C8  1283               	bcf	3,5	;RP0=0, select bank0
   544  07C9  082F               	movf	?_map+1,w
   545  07CA  00D8               	movwf	main@val2+1
   546  07CB  082E               	movf	?_map,w
   547  07CC  00D7               	movwf	main@val2
   548  07CD                     l947:
   549                           
   550                           ;ibismain.c: 85:    DC1B1 = val2 & 2;
   551  07CD  1295               	bcf	21,5	;volatile
   552  07CE                     l949:
   553                           
   554                           ;ibismain.c: 86:    DC1B0 = val2 & 1;
   555  07CE  1857               	btfsc	main@val2,0
   556  07CF  2FD1               	goto	u521
   557  07D0  2FD4               	goto	u520
   558  07D1                     u521:
   559  07D1  1283               	bcf	3,5	;RP0=0, select bank0
   560  07D2  1615               	bsf	21,4	;volatile
   561  07D3  2FD6               	goto	u534
   562  07D4                     u520:
   563  07D4  1283               	bcf	3,5	;RP0=0, select bank0
   564  07D5  1215               	bcf	21,4	;volatile
   565  07D6                     u534:
   566  07D6                     l951:
   567                           
   568                           ;ibismain.c: 87:    CCPR1L = val2;
   569  07D6  0857               	movf	main@val2,w
   570  07D7  0093               	movwf	19	;volatile
   571  07D8                     l953:
   572                           
   573                           ;ibismain.c: 89:    if(counter == 0){
   574  07D8  0859               	movf	main@counter,w
   575  07D9  045A               	iorwf	main@counter+1,w
   576  07DA  1D03               	btfss	3,2
   577  07DB  2FDD               	goto	u541
   578  07DC  2FDE               	goto	u540
   579  07DD                     u541:
   580  07DD  2FE0               	goto	l957
   581  07DE                     u540:
   582  07DE                     l955:
   583                           
   584                           ;ibismain.c: 90:     flag2 = 0;
   585  07DE  01D4               	clrf	main@flag2
   586                           
   587                           ;ibismain.c: 91:    }
   588  07DF  2FEA               	goto	l961
   589  07E0                     l957:
   590  07E0  0A59               	incf	main@counter,w
   591  07E1  3003               	movlw	3
   592  07E2  1903               	skipnz
   593  07E3  065A               	xorwf	main@counter+1,w
   594  07E4  1D03               	btfss	3,2
   595  07E5  2FE7               	goto	u551
   596  07E6  2FE8               	goto	u550
   597  07E7                     u551:
   598  07E7  2FEA               	goto	l961
   599  07E8                     u550:
   600  07E8                     l959:
   601                           
   602                           ;ibismain.c: 93:     flag2 = 1;
   603  07E8  01D4               	clrf	main@flag2
   604  07E9  0AD4               	incf	main@flag2,f
   605  07EA                     l961:
   606                           
   607                           ;ibismain.c: 96:    if(flag2){
   608  07EA  0854               	movf	main@flag2,w
   609  07EB  1903               	btfsc	3,2
   610  07EC  2FEE               	goto	u561
   611  07ED  2FEF               	goto	u560
   612  07EE                     u561:
   613  07EE  2FF6               	goto	l965
   614  07EF                     u560:
   615  07EF                     l963:
   616                           
   617                           ;ibismain.c: 97:     counter--;
   618  07EF  30FF               	movlw	255
   619  07F0  07D9               	addwf	main@counter,f
   620  07F1  1803               	skipnc
   621  07F2  0ADA               	incf	main@counter+1,f
   622  07F3  30FF               	movlw	255
   623  07F4  07DA               	addwf	main@counter+1,f
   624                           
   625                           ;ibismain.c: 98:    }
   626  07F5  2F54               	goto	l929
   627  07F6                     l965:
   628                           
   629                           ;ibismain.c: 100:     counter++;
   630  07F6  3001               	movlw	1
   631  07F7  07D9               	addwf	main@counter,f
   632  07F8  1803               	skipnc
   633  07F9  0ADA               	incf	main@counter+1,f
   634  07FA  3000               	movlw	0
   635  07FB  07DA               	addwf	main@counter+1,f
   636  07FC  2F54               	goto	l929
   637  07FD  2800               	ljmp	start
   638  07FE                     __end_of_main:
   639                           
   640                           	psect	text1
   641  06AC                     __ptext1:	
   642 ;; *************** function _map *****************
   643 ;; Defined at:
   644 ;;		line 54 in file "ibismain.c"
   645 ;; Parameters:    Size  Location     Type
   646 ;;  x               4   14[BANK0 ] long 
   647 ;;  in_min          4   18[BANK0 ] long 
   648 ;;  in_max          4   22[BANK0 ] long 
   649 ;;  out_min         4   26[BANK0 ] long 
   650 ;;  out_max         4   30[BANK0 ] long 
   651 ;; Auto vars:     Size  Location     Type
   652 ;;		None
   653 ;; Return value:  Size  Location     Type
   654 ;;                  4   14[BANK0 ] long 
   655 ;; Registers used:
   656 ;;		wreg, status,2, status,0, pclath, cstack
   657 ;; Tracked objects:
   658 ;;		On entry : 0/0
   659 ;;		On exit  : 0/0
   660 ;;		Unchanged: 0/0
   661 ;; Data sizes:     COMMON   BANK0   BANK1
   662 ;;      Params:         0      20       0
   663 ;;      Locals:         0       0       0
   664 ;;      Temps:          0      16       0
   665 ;;      Totals:         0      36       0
   666 ;;Total ram usage:       36 bytes
   667 ;; Hardware stack levels used:    1
   668 ;; Hardware stack levels required when called:    1
   669 ;; This function calls:
   670 ;;		___aldiv
   671 ;;		___lmul
   672 ;; This function is called by:
   673 ;;		_main
   674 ;; This function uses a non-reentrant model
   675 ;;
   676                           
   677                           
   678                           ;psect for function _map
   679  06AC                     _map:
   680  06AC                     l913:	
   681                           ;incstack = 0
   682                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
   683                           
   684                           
   685                           ;ibismain.c: 55:   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_m
      +                          in;
   686  06AC  1283               	bcf	3,5	;RP0=0, select bank0
   687  06AD  0836               	movf	map@in_max,w
   688  06AE  00C2               	movwf	??_map
   689  06AF  0837               	movf	map@in_max+1,w
   690  06B0  00C3               	movwf	??_map+1
   691  06B1  0838               	movf	map@in_max+2,w
   692  06B2  00C4               	movwf	??_map+2
   693  06B3  0839               	movf	map@in_max+3,w
   694  06B4  00C5               	movwf	??_map+3
   695  06B5  0832               	movf	map@in_min,w
   696  06B6  02C2               	subwf	??_map,f
   697  06B7  0833               	movf	map@in_min+1,w
   698  06B8  1C03               	skipc
   699  06B9  0F33               	incfsz	map@in_min+1,w
   700  06BA  2EBC               	goto	u461
   701  06BB  2EBD               	goto	u462
   702  06BC                     u461:
   703  06BC  02C3               	subwf	??_map+1,f
   704  06BD                     u462:
   705  06BD  0834               	movf	map@in_min+2,w
   706  06BE  1C03               	skipc
   707  06BF  0F34               	incfsz	map@in_min+2,w
   708  06C0  2EC2               	goto	u463
   709  06C1  2EC3               	goto	u464
   710  06C2                     u463:
   711  06C2  02C4               	subwf	??_map+2,f
   712  06C3                     u464:
   713  06C3  0835               	movf	map@in_min+3,w
   714  06C4  1C03               	skipc
   715  06C5  0F35               	incfsz	map@in_min+3,w
   716  06C6  2EC8               	goto	u465
   717  06C7  2EC9               	goto	u466
   718  06C8                     u465:
   719  06C8  02C5               	subwf	??_map+3,f
   720  06C9                     u466:
   721  06C9  0845               	movf	??_map+3,w
   722  06CA  00A3               	movwf	___aldiv@divisor+3
   723  06CB  0844               	movf	??_map+2,w
   724  06CC  00A2               	movwf	___aldiv@divisor+2
   725  06CD  0843               	movf	??_map+1,w
   726  06CE  00A1               	movwf	___aldiv@divisor+1
   727  06CF  0842               	movf	??_map,w
   728  06D0  00A0               	movwf	___aldiv@divisor
   729  06D1  082E               	movf	map@x,w
   730  06D2  00C6               	movwf	??_map+4
   731  06D3  082F               	movf	map@x+1,w
   732  06D4  00C7               	movwf	??_map+5
   733  06D5  0830               	movf	map@x+2,w
   734  06D6  00C8               	movwf	??_map+6
   735  06D7  0831               	movf	map@x+3,w
   736  06D8  00C9               	movwf	??_map+7
   737  06D9  0832               	movf	map@in_min,w
   738  06DA  02C6               	subwf	??_map+4,f
   739  06DB  0833               	movf	map@in_min+1,w
   740  06DC  1C03               	skipc
   741  06DD  0F33               	incfsz	map@in_min+1,w
   742  06DE  2EE0               	goto	u471
   743  06DF  2EE1               	goto	u472
   744  06E0                     u471:
   745  06E0  02C7               	subwf	??_map+5,f
   746  06E1                     u472:
   747  06E1  0834               	movf	map@in_min+2,w
   748  06E2  1C03               	skipc
   749  06E3  0F34               	incfsz	map@in_min+2,w
   750  06E4  2EE6               	goto	u473
   751  06E5  2EE7               	goto	u474
   752  06E6                     u473:
   753  06E6  02C8               	subwf	??_map+6,f
   754  06E7                     u474:
   755  06E7  0835               	movf	map@in_min+3,w
   756  06E8  1C03               	skipc
   757  06E9  0F35               	incfsz	map@in_min+3,w
   758  06EA  2EEC               	goto	u475
   759  06EB  2EED               	goto	u476
   760  06EC                     u475:
   761  06EC  02C9               	subwf	??_map+7,f
   762  06ED                     u476:
   763  06ED  0849               	movf	??_map+7,w
   764  06EE  00F3               	movwf	___lmul@multiplier+3
   765  06EF  0848               	movf	??_map+6,w
   766  06F0  00F2               	movwf	___lmul@multiplier+2
   767  06F1  0847               	movf	??_map+5,w
   768  06F2  00F1               	movwf	___lmul@multiplier+1
   769  06F3  0846               	movf	??_map+4,w
   770  06F4  00F0               	movwf	___lmul@multiplier
   771  06F5  083E               	movf	map@out_max,w
   772  06F6  00CA               	movwf	??_map+8
   773  06F7  083F               	movf	map@out_max+1,w
   774  06F8  00CB               	movwf	??_map+9
   775  06F9  0840               	movf	map@out_max+2,w
   776  06FA  00CC               	movwf	??_map+10
   777  06FB  0841               	movf	map@out_max+3,w
   778  06FC  00CD               	movwf	??_map+11
   779  06FD  083A               	movf	map@out_min,w
   780  06FE  02CA               	subwf	??_map+8,f
   781  06FF  083B               	movf	map@out_min+1,w
   782  0700  1C03               	skipc
   783  0701  0F3B               	incfsz	map@out_min+1,w
   784  0702  2F04               	goto	u481
   785  0703  2F05               	goto	u482
   786  0704                     u481:
   787  0704  02CB               	subwf	??_map+9,f
   788  0705                     u482:
   789  0705  083C               	movf	map@out_min+2,w
   790  0706  1C03               	skipc
   791  0707  0F3C               	incfsz	map@out_min+2,w
   792  0708  2F0A               	goto	u483
   793  0709  2F0B               	goto	u484
   794  070A                     u483:
   795  070A  02CC               	subwf	??_map+10,f
   796  070B                     u484:
   797  070B  083D               	movf	map@out_min+3,w
   798  070C  1C03               	skipc
   799  070D  0F3D               	incfsz	map@out_min+3,w
   800  070E  2F10               	goto	u485
   801  070F  2F11               	goto	u486
   802  0710                     u485:
   803  0710  02CD               	subwf	??_map+11,f
   804  0711                     u486:
   805  0711  084D               	movf	??_map+11,w
   806  0712  00F7               	movwf	___lmul@multiplicand+3
   807  0713  084C               	movf	??_map+10,w
   808  0714  00F6               	movwf	___lmul@multiplicand+2
   809  0715  084B               	movf	??_map+9,w
   810  0716  00F5               	movwf	___lmul@multiplicand+1
   811  0717  084A               	movf	??_map+8,w
   812  0718  00F4               	movwf	___lmul@multiplicand
   813  0719  25CA               	fcall	___lmul
   814  071A  0873               	movf	?___lmul+3,w
   815  071B  1283               	bcf	3,5	;RP0=0, select bank0
   816  071C  00A7               	movwf	___aldiv@dividend+3
   817  071D  0872               	movf	?___lmul+2,w
   818  071E  00A6               	movwf	___aldiv@dividend+2
   819  071F  0871               	movf	?___lmul+1,w
   820  0720  00A5               	movwf	___aldiv@dividend+1
   821  0721  0870               	movf	?___lmul,w
   822  0722  00A4               	movwf	___aldiv@dividend
   823  0723  2610               	fcall	___aldiv
   824  0724  1283               	bcf	3,5	;RP0=0, select bank0
   825  0725  0820               	movf	?___aldiv,w
   826  0726  073A               	addwf	map@out_min,w
   827  0727  00CE               	movwf	??_map+12
   828  0728  3000               	movlw	0
   829  0729  1803               	skipnc
   830  072A  3001               	movlw	1
   831  072B  0721               	addwf	?___aldiv+1,w
   832  072C  01D0               	clrf	??_map+14
   833  072D  1803               	skipnc
   834  072E  0AD0               	incf	??_map+14,f
   835  072F  073B               	addwf	map@out_min+1,w
   836  0730  00CF               	movwf	??_map+13
   837  0731  1803               	skipnc
   838  0732  0AD0               	incf	??_map+14,f
   839  0733  0822               	movf	?___aldiv+2,w
   840  0734  0750               	addwf	??_map+14,w
   841  0735  01D1               	clrf	??_map+15
   842  0736  1803               	skipnc
   843  0737  0AD1               	incf	??_map+15,f
   844  0738  073C               	addwf	map@out_min+2,w
   845  0739  00D0               	movwf	??_map+14
   846  073A  1803               	skipnc
   847  073B  0AD1               	incf	??_map+15,f
   848  073C  0823               	movf	?___aldiv+3,w
   849  073D  0751               	addwf	??_map+15,w
   850  073E  073D               	addwf	map@out_min+3,w
   851  073F  00D1               	movwf	??_map+15
   852  0740  0851               	movf	??_map+15,w
   853  0741  00B1               	movwf	?_map+3
   854  0742  0850               	movf	??_map+14,w
   855  0743  00B0               	movwf	?_map+2
   856  0744  084F               	movf	??_map+13,w
   857  0745  00AF               	movwf	?_map+1
   858  0746  084E               	movf	??_map+12,w
   859  0747  00AE               	movwf	?_map
   860  0748                     l76:
   861  0748  0008               	return
   862  0749                     __end_of_map:
   863                           
   864                           	psect	text2
   865  05CA                     __ptext2:	
   866 ;; *************** function ___lmul *****************
   867 ;; Defined at:
   868 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul32.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;  multiplier      4    0[COMMON] unsigned long 
   871 ;;  multiplicand    4    4[COMMON] unsigned long 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  product         4    9[COMMON] unsigned long 
   874 ;; Return value:  Size  Location     Type
   875 ;;                  4    0[COMMON] unsigned long 
   876 ;; Registers used:
   877 ;;		wreg, status,2, status,0
   878 ;; Tracked objects:
   879 ;;		On entry : 0/0
   880 ;;		On exit  : 0/0
   881 ;;		Unchanged: 0/0
   882 ;; Data sizes:     COMMON   BANK0   BANK1
   883 ;;      Params:         8       0       0
   884 ;;      Locals:         4       0       0
   885 ;;      Temps:          1       0       0
   886 ;;      Totals:        13       0       0
   887 ;;Total ram usage:       13 bytes
   888 ;; Hardware stack levels used:    1
   889 ;; This function calls:
   890 ;;		Nothing
   891 ;; This function is called by:
   892 ;;		_map
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           
   897                           ;psect for function ___lmul
   898  05CA                     ___lmul:
   899  05CA                     l825:	
   900                           ;incstack = 0
   901                           ; Regs used in ___lmul: [wreg+status,2+status,0]
   902                           
   903  05CA  3000               	movlw	0
   904  05CB  00FC               	movwf	___lmul@product+3
   905  05CC  3000               	movlw	0
   906  05CD  00FB               	movwf	___lmul@product+2
   907  05CE  3000               	movlw	0
   908  05CF  00FA               	movwf	___lmul@product+1
   909  05D0  3000               	movlw	0
   910  05D1  00F9               	movwf	___lmul@product
   911  05D2                     l827:
   912  05D2  1C70               	btfss	___lmul@multiplier,0
   913  05D3  2DD5               	goto	u291
   914  05D4  2DD6               	goto	u290
   915  05D5                     u291:
   916  05D5  2DED               	goto	l831
   917  05D6                     u290:
   918  05D6                     l829:
   919  05D6  0874               	movf	___lmul@multiplicand,w
   920  05D7  07F9               	addwf	___lmul@product,f
   921  05D8  0875               	movf	___lmul@multiplicand+1,w
   922  05D9  1103               	clrz
   923  05DA  1803               	skipnc
   924  05DB  3E01               	addlw	1
   925  05DC  1903               	skipnz
   926  05DD  2DDF               	goto	u301
   927  05DE  07FA               	addwf	___lmul@product+1,f
   928  05DF                     u301:
   929  05DF  0876               	movf	___lmul@multiplicand+2,w
   930  05E0  1103               	clrz
   931  05E1  1803               	skipnc
   932  05E2  3E01               	addlw	1
   933  05E3  1903               	skipnz
   934  05E4  2DE6               	goto	u302
   935  05E5  07FB               	addwf	___lmul@product+2,f
   936  05E6                     u302:
   937  05E6  0877               	movf	___lmul@multiplicand+3,w
   938  05E7  1103               	clrz
   939  05E8  1803               	skipnc
   940  05E9  3E01               	addlw	1
   941  05EA  1903               	skipnz
   942  05EB  2DED               	goto	u303
   943  05EC  07FC               	addwf	___lmul@product+3,f
   944  05ED                     u303:
   945  05ED                     l831:
   946  05ED  3001               	movlw	1
   947  05EE  00F8               	movwf	??___lmul
   948  05EF                     u315:
   949  05EF  1003               	clrc
   950  05F0  0DF4               	rlf	___lmul@multiplicand,f
   951  05F1  0DF5               	rlf	___lmul@multiplicand+1,f
   952  05F2  0DF6               	rlf	___lmul@multiplicand+2,f
   953  05F3  0DF7               	rlf	___lmul@multiplicand+3,f
   954  05F4  0BF8               	decfsz	??___lmul,f
   955  05F5  2DEF               	goto	u315
   956  05F6                     l833:
   957  05F6  3001               	movlw	1
   958  05F7                     u325:
   959  05F7  1003               	clrc
   960  05F8  0CF3               	rrf	___lmul@multiplier+3,f
   961  05F9  0CF2               	rrf	___lmul@multiplier+2,f
   962  05FA  0CF1               	rrf	___lmul@multiplier+1,f
   963  05FB  0CF0               	rrf	___lmul@multiplier,f
   964  05FC  3EFF               	addlw	-1
   965  05FD  1D03               	skipz
   966  05FE  2DF7               	goto	u325
   967  05FF  0873               	movf	___lmul@multiplier+3,w
   968  0600  0472               	iorwf	___lmul@multiplier+2,w
   969  0601  0471               	iorwf	___lmul@multiplier+1,w
   970  0602  0470               	iorwf	___lmul@multiplier,w
   971  0603  1D03               	skipz
   972  0604  2E06               	goto	u331
   973  0605  2E07               	goto	u330
   974  0606                     u331:
   975  0606  2DD2               	goto	l827
   976  0607                     u330:
   977  0607                     l835:
   978  0607  087C               	movf	___lmul@product+3,w
   979  0608  00F3               	movwf	?___lmul+3
   980  0609  087B               	movf	___lmul@product+2,w
   981  060A  00F2               	movwf	?___lmul+2
   982  060B  087A               	movf	___lmul@product+1,w
   983  060C  00F1               	movwf	?___lmul+1
   984  060D  0879               	movf	___lmul@product,w
   985  060E  00F0               	movwf	?___lmul
   986  060F                     l191:
   987  060F  0008               	return
   988  0610                     __end_of___lmul:
   989                           
   990                           	psect	text3
   991  0610                     __ptext3:	
   992 ;; *************** function ___aldiv *****************
   993 ;; Defined at:
   994 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\aldiv.c"
   995 ;; Parameters:    Size  Location     Type
   996 ;;  divisor         4    0[BANK0 ] long 
   997 ;;  dividend        4    4[BANK0 ] long 
   998 ;; Auto vars:     Size  Location     Type
   999 ;;  quotient        4   10[BANK0 ] long 
  1000 ;;  sign            1    9[BANK0 ] unsigned char 
  1001 ;;  counter         1    8[BANK0 ] unsigned char 
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  4    0[BANK0 ] long 
  1004 ;; Registers used:
  1005 ;;		wreg, status,2, status,0
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMMON   BANK0   BANK1
  1011 ;;      Params:         0       8       0
  1012 ;;      Locals:         0       6       0
  1013 ;;      Temps:          1       0       0
  1014 ;;      Totals:         1      14       0
  1015 ;;Total ram usage:       15 bytes
  1016 ;; Hardware stack levels used:    1
  1017 ;; This function calls:
  1018 ;;		Nothing
  1019 ;; This function is called by:
  1020 ;;		_map
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           
  1025                           ;psect for function ___aldiv
  1026  0610                     ___aldiv:
  1027  0610                     l839:	
  1028                           ;incstack = 0
  1029                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1030                           
  1031  0610  1283               	bcf	3,5	;RP0=0, select bank0
  1032  0611  01A9               	clrf	___aldiv@sign
  1033  0612                     l841:
  1034  0612  1FA3               	btfss	___aldiv@divisor+3,7
  1035  0613  2E15               	goto	u341
  1036  0614  2E16               	goto	u340
  1037  0615                     u341:
  1038  0615  2E23               	goto	l242
  1039  0616                     u340:
  1040  0616                     l843:
  1041  0616  09A0               	comf	___aldiv@divisor,f
  1042  0617  09A1               	comf	___aldiv@divisor+1,f
  1043  0618  09A2               	comf	___aldiv@divisor+2,f
  1044  0619  09A3               	comf	___aldiv@divisor+3,f
  1045  061A  0AA0               	incf	___aldiv@divisor,f
  1046  061B  1903               	skipnz
  1047  061C  0AA1               	incf	___aldiv@divisor+1,f
  1048  061D  1903               	skipnz
  1049  061E  0AA2               	incf	___aldiv@divisor+2,f
  1050  061F  1903               	skipnz
  1051  0620  0AA3               	incf	___aldiv@divisor+3,f
  1052  0621  01A9               	clrf	___aldiv@sign
  1053  0622  0AA9               	incf	___aldiv@sign,f
  1054  0623                     l242:
  1055  0623  1FA7               	btfss	___aldiv@dividend+3,7
  1056  0624  2E26               	goto	u351
  1057  0625  2E27               	goto	u350
  1058  0626                     u351:
  1059  0626  2E36               	goto	l849
  1060  0627                     u350:
  1061  0627                     l845:
  1062  0627  09A4               	comf	___aldiv@dividend,f
  1063  0628  09A5               	comf	___aldiv@dividend+1,f
  1064  0629  09A6               	comf	___aldiv@dividend+2,f
  1065  062A  09A7               	comf	___aldiv@dividend+3,f
  1066  062B  0AA4               	incf	___aldiv@dividend,f
  1067  062C  1903               	skipnz
  1068  062D  0AA5               	incf	___aldiv@dividend+1,f
  1069  062E  1903               	skipnz
  1070  062F  0AA6               	incf	___aldiv@dividend+2,f
  1071  0630  1903               	skipnz
  1072  0631  0AA7               	incf	___aldiv@dividend+3,f
  1073  0632                     l847:
  1074  0632  3001               	movlw	1
  1075  0633  00FD               	movwf	??___aldiv
  1076  0634  087D               	movf	??___aldiv,w
  1077  0635  06A9               	xorwf	___aldiv@sign,f
  1078  0636                     l849:
  1079  0636  3000               	movlw	0
  1080  0637  00AD               	movwf	___aldiv@quotient+3
  1081  0638  3000               	movlw	0
  1082  0639  00AC               	movwf	___aldiv@quotient+2
  1083  063A  3000               	movlw	0
  1084  063B  00AB               	movwf	___aldiv@quotient+1
  1085  063C  3000               	movlw	0
  1086  063D  00AA               	movwf	___aldiv@quotient
  1087  063E                     l851:
  1088  063E  0823               	movf	___aldiv@divisor+3,w
  1089  063F  0422               	iorwf	___aldiv@divisor+2,w
  1090  0640  0421               	iorwf	___aldiv@divisor+1,w
  1091  0641  0420               	iorwf	___aldiv@divisor,w
  1092  0642  1903               	skipnz
  1093  0643  2E45               	goto	u361
  1094  0644  2E46               	goto	u360
  1095  0645                     u361:
  1096  0645  2E93               	goto	l871
  1097  0646                     u360:
  1098  0646                     l853:
  1099  0646  01A8               	clrf	___aldiv@counter
  1100  0647  0AA8               	incf	___aldiv@counter,f
  1101  0648  2E56               	goto	l857
  1102  0649                     l855:
  1103  0649  3001               	movlw	1
  1104  064A  00FD               	movwf	??___aldiv
  1105  064B                     u375:
  1106  064B  1003               	clrc
  1107  064C  0DA0               	rlf	___aldiv@divisor,f
  1108  064D  0DA1               	rlf	___aldiv@divisor+1,f
  1109  064E  0DA2               	rlf	___aldiv@divisor+2,f
  1110  064F  0DA3               	rlf	___aldiv@divisor+3,f
  1111  0650  0BFD               	decfsz	??___aldiv,f
  1112  0651  2E4B               	goto	u375
  1113  0652  3001               	movlw	1
  1114  0653  00FD               	movwf	??___aldiv
  1115  0654  087D               	movf	??___aldiv,w
  1116  0655  07A8               	addwf	___aldiv@counter,f
  1117  0656                     l857:
  1118  0656  1FA3               	btfss	___aldiv@divisor+3,7
  1119  0657  2E59               	goto	u381
  1120  0658  2E5A               	goto	u380
  1121  0659                     u381:
  1122  0659  2E49               	goto	l855
  1123  065A                     u380:
  1124  065A                     l859:
  1125  065A  3001               	movlw	1
  1126  065B  00FD               	movwf	??___aldiv
  1127  065C                     u395:
  1128  065C  1003               	clrc
  1129  065D  0DAA               	rlf	___aldiv@quotient,f
  1130  065E  0DAB               	rlf	___aldiv@quotient+1,f
  1131  065F  0DAC               	rlf	___aldiv@quotient+2,f
  1132  0660  0DAD               	rlf	___aldiv@quotient+3,f
  1133  0661  0BFD               	decfsz	??___aldiv,f
  1134  0662  2E5C               	goto	u395
  1135  0663                     l861:
  1136  0663  0823               	movf	___aldiv@divisor+3,w
  1137  0664  0227               	subwf	___aldiv@dividend+3,w
  1138  0665  1D03               	skipz
  1139  0666  2E71               	goto	u405
  1140  0667  0822               	movf	___aldiv@divisor+2,w
  1141  0668  0226               	subwf	___aldiv@dividend+2,w
  1142  0669  1D03               	skipz
  1143  066A  2E71               	goto	u405
  1144  066B  0821               	movf	___aldiv@divisor+1,w
  1145  066C  0225               	subwf	___aldiv@dividend+1,w
  1146  066D  1D03               	skipz
  1147  066E  2E71               	goto	u405
  1148  066F  0820               	movf	___aldiv@divisor,w
  1149  0670  0224               	subwf	___aldiv@dividend,w
  1150  0671                     u405:
  1151  0671  1C03               	skipc
  1152  0672  2E74               	goto	u401
  1153  0673  2E75               	goto	u400
  1154  0674                     u401:
  1155  0674  2E84               	goto	l867
  1156  0675                     u400:
  1157  0675                     l863:
  1158  0675  0820               	movf	___aldiv@divisor,w
  1159  0676  02A4               	subwf	___aldiv@dividend,f
  1160  0677  0821               	movf	___aldiv@divisor+1,w
  1161  0678  1C03               	skipc
  1162  0679  0F21               	incfsz	___aldiv@divisor+1,w
  1163  067A  02A5               	subwf	___aldiv@dividend+1,f
  1164  067B  0822               	movf	___aldiv@divisor+2,w
  1165  067C  1C03               	skipc
  1166  067D  0F22               	incfsz	___aldiv@divisor+2,w
  1167  067E  02A6               	subwf	___aldiv@dividend+2,f
  1168  067F  0823               	movf	___aldiv@divisor+3,w
  1169  0680  1C03               	skipc
  1170  0681  0F23               	incfsz	___aldiv@divisor+3,w
  1171  0682  02A7               	subwf	___aldiv@dividend+3,f
  1172  0683                     l865:
  1173  0683  142A               	bsf	___aldiv@quotient,0
  1174  0684                     l867:
  1175  0684  3001               	movlw	1
  1176  0685                     u415:
  1177  0685  1003               	clrc
  1178  0686  0CA3               	rrf	___aldiv@divisor+3,f
  1179  0687  0CA2               	rrf	___aldiv@divisor+2,f
  1180  0688  0CA1               	rrf	___aldiv@divisor+1,f
  1181  0689  0CA0               	rrf	___aldiv@divisor,f
  1182  068A  3EFF               	addlw	-1
  1183  068B  1D03               	skipz
  1184  068C  2E85               	goto	u415
  1185  068D                     l869:
  1186  068D  3001               	movlw	1
  1187  068E  02A8               	subwf	___aldiv@counter,f
  1188  068F  1D03               	btfss	3,2
  1189  0690  2E92               	goto	u421
  1190  0691  2E93               	goto	u420
  1191  0692                     u421:
  1192  0692  2E5A               	goto	l859
  1193  0693                     u420:
  1194  0693                     l871:
  1195  0693  0829               	movf	___aldiv@sign,w
  1196  0694  1903               	btfsc	3,2
  1197  0695  2E97               	goto	u431
  1198  0696  2E98               	goto	u430
  1199  0697                     u431:
  1200  0697  2EA3               	goto	l875
  1201  0698                     u430:
  1202  0698                     l873:
  1203  0698  09AA               	comf	___aldiv@quotient,f
  1204  0699  09AB               	comf	___aldiv@quotient+1,f
  1205  069A  09AC               	comf	___aldiv@quotient+2,f
  1206  069B  09AD               	comf	___aldiv@quotient+3,f
  1207  069C  0AAA               	incf	___aldiv@quotient,f
  1208  069D  1903               	skipnz
  1209  069E  0AAB               	incf	___aldiv@quotient+1,f
  1210  069F  1903               	skipnz
  1211  06A0  0AAC               	incf	___aldiv@quotient+2,f
  1212  06A1  1903               	skipnz
  1213  06A2  0AAD               	incf	___aldiv@quotient+3,f
  1214  06A3                     l875:
  1215  06A3  082D               	movf	___aldiv@quotient+3,w
  1216  06A4  00A3               	movwf	?___aldiv+3
  1217  06A5  082C               	movf	___aldiv@quotient+2,w
  1218  06A6  00A2               	movwf	?___aldiv+2
  1219  06A7  082B               	movf	___aldiv@quotient+1,w
  1220  06A8  00A1               	movwf	?___aldiv+1
  1221  06A9  082A               	movf	___aldiv@quotient,w
  1222  06AA  00A0               	movwf	?___aldiv
  1223  06AB                     l252:
  1224  06AB  0008               	return
  1225  06AC                     __end_of___aldiv:
  1226                           
  1227                           	psect	text4
  1228  05B4                     __ptext4:	
  1229 ;; *************** function _PWM_Initialize *****************
  1230 ;; Defined at:
  1231 ;;		line 29 in file "ibismain.c"
  1232 ;; Parameters:    Size  Location     Type
  1233 ;;		None
  1234 ;; Auto vars:     Size  Location     Type
  1235 ;;		None
  1236 ;; Return value:  Size  Location     Type
  1237 ;;                  1    wreg      void 
  1238 ;; Registers used:
  1239 ;;		wreg
  1240 ;; Tracked objects:
  1241 ;;		On entry : 0/0
  1242 ;;		On exit  : 0/0
  1243 ;;		Unchanged: 0/0
  1244 ;; Data sizes:     COMMON   BANK0   BANK1
  1245 ;;      Params:         0       0       0
  1246 ;;      Locals:         0       0       0
  1247 ;;      Temps:          0       0       0
  1248 ;;      Totals:         0       0       0
  1249 ;;Total ram usage:        0 bytes
  1250 ;; Hardware stack levels used:    1
  1251 ;; This function calls:
  1252 ;;		Nothing
  1253 ;; This function is called by:
  1254 ;;		_main
  1255 ;; This function uses a non-reentrant model
  1256 ;;
  1257                           
  1258                           
  1259                           ;psect for function _PWM_Initialize
  1260  05B4                     _PWM_Initialize:
  1261  05B4                     l879:	
  1262                           ;incstack = 0
  1263                           ; Regs used in _PWM_Initialize: [wreg]
  1264                           
  1265                           
  1266                           ;ibismain.c: 31:   TRISC5 = 1;
  1267  05B4  1683               	bsf	3,5	;RP0=1, select bank1
  1268  05B5  1687               	bsf	7,5	;volatile
  1269  05B6                     l881:
  1270                           
  1271                           ;ibismain.c: 32:   PR2 = 0xfb;
  1272  05B6  30FB               	movlw	251
  1273  05B7  0092               	movwf	18	;volatile
  1274  05B8                     l883:
  1275                           
  1276                           ;ibismain.c: 33:   CCP1M3 = 1; CCP1M2 = 1; CCP1M1 = 0; CCP1M0 = 0; P1M1 = 1; P1M0 = 0;
  1277  05B8  1283               	bcf	3,5	;RP0=0, select bank0
  1278  05B9  1595               	bsf	21,3	;volatile
  1279  05BA                     l885:
  1280  05BA  1515               	bsf	21,2	;volatile
  1281  05BB                     l887:
  1282  05BB  1095               	bcf	21,1	;volatile
  1283  05BC                     l889:
  1284  05BC  1015               	bcf	21,0	;volatile
  1285  05BD                     l891:
  1286  05BD  1795               	bsf	21,7	;volatile
  1287  05BE                     l893:
  1288  05BE  1315               	bcf	21,6	;volatile
  1289  05BF                     l895:
  1290                           
  1291                           ;ibismain.c: 34:    TMR2IF = 0;
  1292  05BF  108C               	bcf	12,1	;volatile
  1293  05C0                     l897:
  1294                           
  1295                           ;ibismain.c: 35:    T2CKPS1 = 1; T2CKPS0 = 1; TMR2ON = 1;
  1296  05C0  1492               	bsf	18,1	;volatile
  1297  05C1                     l899:
  1298  05C1  1412               	bsf	18,0	;volatile
  1299  05C2                     l901:
  1300  05C2  1512               	bsf	18,2	;volatile
  1301  05C3                     l61:	
  1302                           ;ibismain.c: 36:    while(!TMR2IF);
  1303                           
  1304  05C3  1C8C               	btfss	12,1	;volatile
  1305  05C4  2DC6               	goto	u441
  1306  05C5  2DC7               	goto	u440
  1307  05C6                     u441:
  1308  05C6  2DC3               	goto	l61
  1309  05C7                     u440:
  1310  05C7                     l63:
  1311                           
  1312                           ;ibismain.c: 37:    TRISC5 = 0;
  1313  05C7  1683               	bsf	3,5	;RP0=1, select bank1
  1314  05C8  1287               	bcf	7,5	;volatile
  1315  05C9                     l64:
  1316  05C9  0008               	return
  1317  05CA                     __end_of_PWM_Initialize:
  1318                           
  1319                           	psect	text5
  1320  059F                     __ptext5:	
  1321 ;; *************** function _ADC_Read *****************
  1322 ;; Defined at:
  1323 ;;		line 46 in file "ibismain.c"
  1324 ;; Parameters:    Size  Location     Type
  1325 ;;		None
  1326 ;; Auto vars:     Size  Location     Type
  1327 ;;		None
  1328 ;; Return value:  Size  Location     Type
  1329 ;;                  2    0[COMMON] int 
  1330 ;; Registers used:
  1331 ;;		wreg
  1332 ;; Tracked objects:
  1333 ;;		On entry : 0/0
  1334 ;;		On exit  : 0/0
  1335 ;;		Unchanged: 0/0
  1336 ;; Data sizes:     COMMON   BANK0   BANK1
  1337 ;;      Params:         2       0       0
  1338 ;;      Locals:         0       0       0
  1339 ;;      Temps:          2       0       0
  1340 ;;      Totals:         4       0       0
  1341 ;;Total ram usage:        4 bytes
  1342 ;; Hardware stack levels used:    1
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_main
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           
  1351                           ;psect for function _ADC_Read
  1352  059F                     _ADC_Read:
  1353  059F                     l905:	
  1354                           ;incstack = 0
  1355                           ; Regs used in _ADC_Read: [wreg]
  1356                           
  1357                           
  1358                           ;ibismain.c: 48:   _delay((unsigned long)((2)*(8000000/4000.0)));
  1359  059F  3006               	movlw	6
  1360  05A0  00F3               	movwf	??_ADC_Read+1
  1361  05A1  3030               	movlw	48
  1362  05A2  00F2               	movwf	??_ADC_Read
  1363  05A3                     u577:
  1364  05A3  0BF2               	decfsz	??_ADC_Read,f
  1365  05A4  2DA3               	goto	u577
  1366  05A5  0BF3               	decfsz	??_ADC_Read+1,f
  1367  05A6  2DA3               	goto	u577
  1368  05A7  0000               	nop
  1369  05A8                     l907:
  1370                           
  1371                           ;ibismain.c: 49:   GO_nDONE = 1;
  1372  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  1373  05A9  149F               	bsf	31,1	;volatile
  1374  05AA                     l70:	
  1375                           ;ibismain.c: 50:   while(GO_nDONE);
  1376                           
  1377  05AA  189F               	btfsc	31,1	;volatile
  1378  05AB  2DAD               	goto	u451
  1379  05AC  2DAE               	goto	u450
  1380  05AD                     u451:
  1381  05AD  2DAA               	goto	l70
  1382  05AE                     u450:
  1383  05AE                     l909:
  1384                           
  1385                           ;ibismain.c: 51:   return ((ADRESH<<8)+ADRESL);
  1386  05AE  081E               	movf	30,w	;volatile
  1387  05AF  00F1               	movwf	?_ADC_Read+1
  1388  05B0  1683               	bsf	3,5	;RP0=1, select bank1
  1389  05B1  081E               	movf	30,w	;volatile
  1390  05B2  00F0               	movwf	?_ADC_Read
  1391  05B3                     l73:
  1392  05B3  0008               	return
  1393  05B4                     __end_of_ADC_Read:
  1394                           
  1395                           	psect	text6
  1396  0598                     __ptext6:	
  1397 ;; *************** function _ADC_Initialize *****************
  1398 ;; Defined at:
  1399 ;;		line 40 in file "ibismain.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;		None
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;		None
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMMON   BANK0   BANK1
  1413 ;;      Params:         0       0       0
  1414 ;;      Locals:         0       0       0
  1415 ;;      Temps:          0       0       0
  1416 ;;      Totals:         0       0       0
  1417 ;;Total ram usage:        0 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; This function calls:
  1420 ;;		Nothing
  1421 ;; This function is called by:
  1422 ;;		_main
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           
  1427                           ;psect for function _ADC_Initialize
  1428  0598                     _ADC_Initialize:
  1429  0598                     l903:	
  1430                           ;incstack = 0
  1431                           ; Regs used in _ADC_Initialize: [wreg]
  1432                           
  1433                           
  1434                           ;ibismain.c: 42:   ADCON0 = 0b10001001;
  1435  0598  3089               	movlw	137
  1436  0599  1283               	bcf	3,5	;RP0=0, select bank0
  1437  059A  009F               	movwf	31	;volatile
  1438                           
  1439                           ;ibismain.c: 43:   ADCON1 = 0b01010000;
  1440  059B  3050               	movlw	80
  1441  059C  1683               	bsf	3,5	;RP0=1, select bank1
  1442  059D  009F               	movwf	31	;volatile
  1443  059E                     l67:
  1444  059E  0008               	return
  1445  059F                     __end_of_ADC_Initialize:
  1446  007E                     btemp	set	126	;btemp
  1447  007E                     wtemp0	set	126
  1448                           
  1449                           	psect	config
  1450                           
  1451                           ;Config register CONFIG @ 0x2007
  1452                           ;	Oscillator Selection bits
  1453                           ;	FOSC = INTOSCIO, INTOSCIO oscillator: I/O function on RA4/OSC2/CLKOUT pin, I/O functio
      +                          n on RA5/OSC1/CLKIN
  1454                           ;	Watchdog Timer Enable bit
  1455                           ;	WDTE = ON, WDT enabled
  1456                           ;	Power-up Timer Enable bit
  1457                           ;	PWRTE = OFF, PWRT disabled
  1458                           ;	MCLR Pin Function Select bit
  1459                           ;	MCLRE = ON, MCLR pin function is MCLR
  1460                           ;	Code Protection bit
  1461                           ;	CP = OFF, Program memory code protection is disabled
  1462                           ;	Data Code Protection bit
  1463                           ;	CPD = OFF, Data memory code protection is disabled
  1464                           ;	Brown Out Detect
  1465                           ;	BOREN = ON, BOR enabled
  1466                           ;	Internal External Switchover bit
  1467                           ;	IESO = ON, Internal External Switchover mode is enabled
  1468                           ;	Fail-Safe Clock Monitor Enabled bit
  1469                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1470  2007                     	org	8199
  1471  2007  3FFC               	dw	16380

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     59      59
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _map->___aldiv
    ___aldiv->___lmul

Critical Paths under _main in BANK0

    _main->_map
    _map->___aldiv

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    1816
                                             50 BANK0      9     9      0
                     _ADC_Initialize
                           _ADC_Read
                     _PWM_Initialize
                                _map
 ---------------------------------------------------------------------------------
 (1) _map                                                 36    16     20    1610
                                             14 BANK0     36    16     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _ADC_Read
   _PWM_Initialize
   _map
     ___aldiv
       ___lmul (ARG)
     ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     3B      3B       4       73.8%
BANK1               20      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
DATA                 0      0       0       8        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Aug 11 16:48:31 2022

__size_of_PWM_Initialize 0016                       l61 05C3                       l70 05AA  
                     l63 05C7                       l64 05C9                       l73 05B3  
                     l82 079D                       l67 059E                       l76 0748  
                    l242 0623                      l252 06AB                      l191 060F  
                    l901 05C2                      l903 0598                      l831 05ED  
                    l905 059F                      l841 0612                      l833 05F6  
                    l825 05CA                      l913 06AC                      l921 074E  
                    l907 05A8                      l851 063E                      l843 0616  
                    l835 0607                      l827 05D2                      l931 0759  
                    l923 0750                      l909 05AE                      l861 0663  
                    l853 0646                      l845 0627                      l829 05D6  
                    l941 0799                      l933 075F                      l925 0752  
                    l917 0749                      l863 0675                      l855 0649  
                    l871 0693                      l847 0632                      l839 0610  
                    l951 07D6                      l943 079A                      l935 078E  
                    l927 0753                      l919 074D                      l881 05B6  
                    l873 0698                      l865 0683                      l857 0656  
                    l849 0636                      l961 07EA                      l953 07D8  
                    l945 079E                      l937 078F                      l929 0754  
                    l891 05BD                      l883 05B8                      l875 06A3  
                    l867 0684                      l859 065A                      l963 07EF  
                    l955 07DE                      l947 07CD                      l939 0797  
                    l893 05BE                      l885 05BA                      l869 068D  
                    l965 07F6                      l957 07E0                      l949 07CE  
                    l895 05BF                      l887 05BB                      l879 05B4  
                    l959 07E8                      l897 05C0                      l889 05BC  
                    l899 05C1                      _RC0 0038                      _RA5 002D  
                    u301 05DF                      u302 05E6                      u303 05ED  
                    u400 0675                      u401 0674                      u330 0607  
                    u331 0606                      u315 05EF                      u420 0693  
                    u340 0616                      u500 0795                      u421 0692  
                    u405 0671                      u341 0615                      u325 05F7  
                    u501 0792                      u430 0698                      u350 0627  
                    _PR2 0092                      u431 0697                      u415 0685  
                    u351 0626                      u440 05C7                      u360 0646  
                    u520 07D4                      u441 05C6                      u361 0645  
                    u521 07D1                      u450 05AE                      u290 05D6  
                    u514 0797                      u451 05AD                      u291 05D5  
                    u380 065A                      u540 07DE                      u381 0659  
                    u461 06BC                      u541 07DD                      u462 06BD  
                    u550 07E8                      u534 07D6                      u375 064B  
                    u471 06E0                      u463 06C2                      u551 07E7  
                    u472 06E1                      u464 06C3                      u560 07EF  
                    u481 0704                      u473 06E6                      u465 06C8  
                    u561 07EE                      u482 0705                      u474 06E7  
                    u466 06C9                      u490 0759                      u395 065C  
                    u483 070A                      u475 06EC                      u491 0758  
                    u484 070B                      u476 06ED                      u485 0710  
                    u486 0711                      u577 05A3                      _map 06AC  
                   ?_map 002E                     _P1M0 00AE                     _P1M1 00AF  
            main@counter 0059                     _main 0749                     map@x 002E  
                   btemp 007E         __end_of_ADC_Read 05B4                     start 0000  
                  ??_map 0042                    _DC1B0 00AC                    _DC1B1 00AD  
        __end_of___aldiv 06AC                    ?_main 0070                    _ANSEL 0091  
                  _IRCF0 047C                    _IRCF1 047D                    _IRCF2 047E  
                  _TRISA 0085                    _TRISC 0087      ___lmul@multiplicand 0074  
                  status 0003                    wtemp0 007E          __initialization 07FE  
           __end_of_main 07FE                   ??_main 007E                   _ADCON0 001F  
                 _ADCON1 009F                   _CCP1M0 00A8                   _CCP1M1 00A9  
                 _CCP1M2 00AA                   _CCP1M3 00AB                   _ADRESH 001E  
                 _ADRESL 009E                   _CCPR1L 0013                   _TMR2IF 0061  
                 _TMR2ON 0092                   _TRISC5 043D                   ___lmul 05CA  
              ??___aldiv 007D           _PWM_Initialize 05B4                ?_ADC_Read 0070  
__end_of__initialization 07FE   __end_of_PWM_Initialize 05CA           __pcstackCOMMON 0070  
             ??_ADC_Read 0072          ?_PWM_Initialize 0070               __pmaintext 0749  
                ?___lmul 0070           ___lmul@product 0079  __size_of_ADC_Initialize 0007  
                _T2CKPS0 0090                  _T2CKPS1 0091                  ___aldiv 0610  
        __size_of___lmul 0046                  __ptext1 06AC                  __ptext2 05CA  
                __ptext3 0610                  __ptext4 05B4                  __ptext5 059F  
                __ptext6 0598             __size_of_map 009D         ___aldiv@dividend 0024  
   end_of_initialization 07FE         ___aldiv@quotient 002A        __size_of_ADC_Read 0015  
             map@out_max 003E               map@out_min 003A           __end_of___lmul 0610  
         _ADC_Initialize 0598      start_initialization 07FE              __end_of_map 0749  
       ??_PWM_Initialize 0070                 ??___lmul 0078   __end_of_ADC_Initialize 059F  
              ___latbits 0000            __pcstackBANK0 0020                 ?___aldiv 0020  
        ?_ADC_Initialize 0070                 _ADC_Read 059F          ___aldiv@divisor 0020  
        ___aldiv@counter 0028                 _GO_nDONE 00F9                map@in_max 0036  
              map@in_min 0032                main@flag2 0054        ___lmul@multiplier 0070  
       __size_of___aldiv 009C            __size_of_main 00B5                 main@val1 0055  
               main@val2 0057                 main@duty 0052         ??_ADC_Initialize 0070  
           ___aldiv@sign 0029  
